#ifndef CPU_H
#define CPU_H

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

#define MEM_SIZE 0x1000
#define START_ADDRESS 0x0200
#define REGS_COUNT 16
#define SPRITE_SIZE 8
#ifdef SUPER_CHIP
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define VRAM_SIZE 0x2000
#define WIDE_SPRITE_SIZE 16
#define WIDE_FONTS_START_ADDRESS 80
#define STACK_SIZE 16
#else
#define SCREEN_WIDTH 64
#define SCREEN_HEIGHT 32
#define VRAM_SIZE 0x0800
#define STACK_SIZE 12
#endif

typedef enum {
  VF_RESET = 1,
  MEMORY = 2,
  DISPLAY = 4,
  CLIPPING = 8,
  SHIFTING = 16,
  JUMPING = 32
} InstrQuirk;
typedef struct chip8 *CHIP8;
typedef struct ChipConfig {
  uint8_t quirks;
} ChipConfig;

CHIP8 chip_init(ChipConfig);
void chip_destroy(CHIP8);
void chip_run_cycle(CHIP8);
void chip_update_timers(CHIP8);
bool chip_is_sound_timer_active(CHIP8);
void chip_load_rom(CHIP8, uint8_t *, size_t);
void chip_kb_btn_pressed(CHIP8, uint8_t);
void chip_kb_btn_released(CHIP8, uint8_t);
void chip_update_input(CHIP8, uint16_t, uint8_t);
uint8_t *chip_get_vram_ref(CHIP8);
uint8_t chip_get_screen_width(CHIP8);
uint8_t chip_get_screen_height(CHIP8);

static const uint8_t font[80] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

#ifdef SUPER_CHIP
static const uint8_t wide_font[100] = {
    0x3C, 0x7E, 0xE7, 0xC3, 0xC3, 0xC3, 0xC3, 0xE7, 0x7E, 0x3C, // 0
    0x18, 0x38, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, // 1
    0x3E, 0x7F, 0xC3, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xFF, 0xFF, // 2
    0x3C, 0x7E, 0xC3, 0x03, 0x0E, 0x0E, 0x03, 0xC3, 0x7E, 0x3C, // 3
    0x06, 0x0E, 0x1E, 0x36, 0x66, 0xC6, 0xFF, 0xFF, 0x06, 0x06, // 4
    0xFF, 0xFF, 0xC0, 0xC0, 0xFC, 0xFE, 0x03, 0xC3, 0x7E, 0x3C, // 5
    0x3E, 0x7C, 0xC0, 0xC0, 0xFC, 0xFE, 0xC3, 0xC3, 0x7E, 0x3C, // 6
    0xFF, 0xFF, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x60, 0x60, // 7
    0x3C, 0x7E, 0xC3, 0xC3, 0x7E, 0x7E, 0xC3, 0xC3, 0x7E, 0x3C, // 8
    0x3C, 0x7E, 0xC3, 0xC3, 0x7F, 0x3F, 0x03, 0x03, 0x3E, 0x7C  // 9
};
#endif

#endif
